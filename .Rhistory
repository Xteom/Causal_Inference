library(gridExtra)
install.packages("gridExtra")
# Actualización de la función para incluir el cálculo de la varianza ajustada
bootstrap_Menu_Price_ratios_var_adjusted <- function(data, M, L){
N <- 1000 # Número de repeticiones
bootstrap_ratios <- numeric(N)
bootstrap_vars <- numeric(N) # Para almacenar las varianzas ajustadas
for(i in 1:N){
sample_indices <- sample(nrow(data), size = M, replace = TRUE)
sample_data <- data$Menu_Price[sample_indices]
# Calcular el ratio para la submuestra
ratio <- get_ratio(sample_data)
bootstrap_ratios[i] <- ratio
# Calcular la varianza ajustada para la submuestra
Xboot <- mean(sample_data) # Media de la submuestra bootstrap
var_adjusted <- (L / M) * (1 / (M - 1)) * sum((sample_data - Xboot)^2)
bootstrap_vars[i] <- var_adjusted
}
return(list(ratios = bootstrap_ratios, variances = bootstrap_vars))
}
# Tamaño de la muestra original
L <- nrow(foodtruck20)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(gridExtra)
foodtruck <- read_csv("foodtrucks.csv")
foodtruck20 <- read_csv("foodtrucks20.csv")
set.seed(69)
head(foodtruck20)
summary(foodtruck20)
ggplot(foodtruck20, aes(x = Menu_Price)) +
geom_histogram(binwidth = 1, fill = "#39a8c0", color = "black") +
theme_minimal() +
labs(title = "Histograma de Precio Promedio del Platillo",
x = "Precio Promedio del Platillo",
y = "Frecuencia")
t_test <- t.test(foodtruck20$Menu_Price, conf.level = 0.95)
cat("Podemos afirmar con un 95% de confianza que el precio promedio \ndel platillo se encuentra entre", "$",t_test$conf.int[1], "y $", t_test$conf.int[2], "MXM \n")
combined_data <- bind_rows(
foodtruck %>% mutate(Source = "Censo"),
foodtruck20 %>% mutate(Source = "Muestra")
)
representatividad_hist1 <- ggplot(combined_data, aes(x = Number_of_Customers, fill = Source)) +
geom_histogram(data = subset(combined_data, Source == "Censo"),
binwidth = 10, alpha = 0.5) +
geom_histogram(data = subset(combined_data, Source == "Muestra"),
binwidth = 10, alpha = 0.5) +
scale_fill_manual(values = c("Censo" = "#39a8c0", "Muestra" = "red")) +
labs(title = "Histograma de Número de Clientes",
x = "Number of Customers",
y = "Frecuencia",
fill = "Fuente") +
theme_minimal()
representatividad_dist1 <- ggplot(combined_data,
aes(x = Number_of_Customers, color = Source)) +
geom_density() +
labs(title = "Distribución de Número de Clientes: Censo vs Muestra",
x = "Number of Customers",
y = "Densidad") +
scale_color_manual(values = c("Censo" = "#39a8c0", "Muestra Aleatoria" = "red")) +
theme_minimal()
grid.arrange(representatividad_dist1, representatividad_hist1, ncol = 1)
# obtenemos el tamaño de muestra (20% del total del censo)
n <- nrow(foodtruck)
sample_size <- round(0.2 * n)
muestra_aleatoria <- foodtruck[sample(n, sample_size ), ]
combined_data_ma <- bind_rows(
foodtruck %>% mutate(Source = "Censo"),
muestra_aleatoria %>% mutate(Source = "Muestra Aleatoria")
)
representatividad_hist2 <- ggplot(combined_data_ma,
aes(x = Number_of_Customers, fill = Source)) +
geom_histogram(data = subset(combined_data, Source == "Censo"),
binwidth = 10, alpha = 0.5) +
geom_histogram(data = subset(combined_data_ma, Source == "Muestra Aleatoria"),
binwidth = 10, alpha = 0.5) +
scale_fill_manual(values = c("Censo" = "#39a8c0", "Muestra Aleatoria" = "orange")) +
labs(title = "Histograma de Número de Clientes",
x = "Number of Customers",
y = "Frecuencia",
fill = "Fuente") +
theme_minimal()
# Gráfico de densidad para Number_of_Customers
representatividad_dist2 <- ggplot(combined_data_ma,
aes(x = Number_of_Customers, color = Source)) +
geom_density() +
labs(title = "Distribución de Número de Clientes: Censo vs M.A.",
x = "Number of Customers",
y = "Densidad") +
scale_color_manual(values = c("Censo" = "#39a8c0", "Muestra Aleatoria" = "orange")) +
theme_minimal()
grid.arrange(representatividad_dist2, representatividad_hist2, ncol = 1)
#Tacos
combined_data_tacos <- bind_rows(
filter(foodtruck, Cuisine_Type == "Tacos") %>% mutate(Source = "Censo"),
filter(muestra_aleatoria, Cuisine_Type == "Tacos") %>% mutate(Source = "Muestra")
)
# Histograma para taquerías
representatividad_hist_tacos <- ggplot(
combined_data_tacos, aes(x = Number_of_Customers, fill = Source)) +
geom_histogram(data = subset(combined_data_tacos, Source == "Censo"),
binwidth = 10, alpha = 0.5) +
geom_histogram(data = subset(combined_data_tacos, Source == "Muestra"),
binwidth = 10, alpha = 0.5) +
scale_fill_manual(values = c("Censo" = "#39a8c0", "Muestra" = "red")) +
labs(title = "Histograma de Número de Clientes de Taquerías",
x = "Number of Customers",
y = "Frecuencia",
fill = "Fuente") +
theme_minimal()
# Distribución de densidad para taquerías
representatividad_dist_tacos <- ggplot(
combined_data_tacos, aes(x = Number_of_Customers, color = Source)) +
geom_density() +
labs(title = "Distribución de Número de Clientes de Taquerías",
x = "Number of Customers",
y = "Densidad") +
scale_color_manual(values = c("Censo" = "#39a8c0", "Muestra" = "red")) +
theme_minimal()
grid.arrange(representatividad_dist_tacos, representatividad_hist_tacos, ncol = 1)
#count(foodtruck20, Cuisine_Type)
t_test_tacos <- t.test(filter(foodtruck20, Cuisine_Type == "Tacos")$Menu_Price,
filter(foodtruck20, Cuisine_Type != "Tacos")$Menu_Price,
conf.level = 0.95)
cat(
"La prueba de hipótesis nos da un P-value de", t_test_tacos$p.value, "por lo que no tenemos \nevidencia suficiente para rechazar la hipótesis nula. Es decir, no podemos decir \nque la media de precios de los tacos sea diferente a la media de los precios \nde los otros foodtrucks.\n"
)
# función para el ratio
get_ratio <- function(data){
p90 <- quantile(data, 0.9)
p10 <- quantile(data, 0.1)
return(p90/p10)
}
# Vector para guardar los resultados del bootstrap.
#data: dataset (debe tener columna Menu_Price)
#n: tamaño de submuestras
bootstrap_Menu_Price_ratios <- function(data, n){
repeticiones <- 1000
bootstrap_ratios <- numeric(repeticiones)
for(i in 1:repeticiones){
# Generamos una submuestra aleatoria de tamaño n
sample_data <- data$Menu_Price[sample(nrow(data), size = n, replace = TRUE)] # Corrección aquí
# Calculamos el ratio para cada submuestra
bootstrap_ratios[i] <- get_ratio(sample_data)
}
return(bootstrap_ratios)
}
bootstrap200 <- bootstrap_Menu_Price_ratios(foodtruck20, 200)
mean_bootstrap200 <- mean(bootstrap200)
ic_bootstrap200 <- quantile(bootstrap200, probs = c(0.025, 0.975))
cat("Estimación puntual del ratio:", mean_bootstrap200, " con un intervalo de confianza \ndel 95% entre", ic_bootstrap200," para el ratio con muestras de 200 obs. \n")
hist_bootstrap200 <- ggplot(data.frame(bootstrap200), aes(x = bootstrap200)) +
geom_histogram(binwidth = 0.1, fill = "skyblue", color = "black") +
geom_vline(xintercept = ic_bootstrap200[1], color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = ic_bootstrap200[2], color = "red", linetype = "dashed", linewidth = 1) +
labs(title = "Histograma de Ratios de Bootstrap (muestras de 200) \ncon Intervalo de Confianza del 95%",
x = "Ratio (Percentil 90 / Percentil 10)",
y = "Frecuencia") +
theme_minimal()
hist_bootstrap200
bootstrap100 <- bootstrap_Menu_Price_ratios(foodtruck20, 100)
mean_bootstrap100 <- mean(bootstrap100)
ic_bootstrap100 <- quantile(bootstrap100, probs = c(0.05, 0.95))
cat("Estimación puntual del ratio:", mean_bootstrap100, " con un intervalo de confianza \ndel 95% entre", ic_bootstrap100," para el ratio con muestras de 100 obs. \n")
# Graficar el histograma con intervalo de confianza del 90%
hist_bootstrap100 <- ggplot(data.frame(bootstrap100), aes(x = bootstrap100)) +
geom_histogram(binwidth = 0.1, fill = "skyblue", color = "black") +
geom_vline(xintercept = ic_bootstrap100[1], color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = ic_bootstrap100[2], color = "red", linetype = "dashed", linewidth = 1) +
labs(title = "Histograma de Ratios de Bootstrap (muestras de 100) \ncon Intervalo de Confianza del 90%",
x = "Ratio (Percentil 90 / Percentil 10)",
y = "Frecuencia") +
theme_minimal()
hist_bootstrap100
# Aplicar la función al dataframe foodtruck20 con M = 100
results <- bootstrap_Menu_Price_ratios_var_adjusted(foodtruck20, 100, L)
# Tamaño de la muestra original
L <- nrow(foodtruck20)
# Aplicar la función al dataframe foodtruck20 con M = 100
results <- bootstrap_Menu_Price_ratios_var_adjusted(foodtruck20, 100, L)
# Actualización de la función para incluir el cálculo de la varianza ajustada
bootstrap_Menu_Price_ratios_var_adjusted <- function(data, M, L){
N <- 1000 # Número de repeticiones
bootstrap_ratios <- numeric(N)
bootstrap_vars <- numeric(N) # Para almacenar las varianzas ajustadas
for(i in 1:N){
sample_indices <- sample(nrow(data), size = M, replace = TRUE)
sample_data <- data$Menu_Price[sample_indices]
# Calcular el ratio para la submuestra
ratio <- get_ratio(sample_data)
bootstrap_ratios[i] <- ratio
# Calcular la varianza ajustada para la submuestra
Xboot <- mean(sample_data) # Media de la submuestra bootstrap
var_adjusted <- (L / M) * (1 / (M - 1)) * sum((sample_data - Xboot)^2)
bootstrap_vars[i] <- var_adjusted
}
return(list(ratios = bootstrap_ratios, variances = bootstrap_vars))
}
# Tamaño de la muestra original
L <- nrow(foodtruck20)
# Aplicar la función al dataframe foodtruck20 con M = 100
results <- bootstrap_Menu_Price_ratios_var_adjusted(foodtruck20, 100, L)
# Calcular la varianza promedio ajustada de las repeticiones de bootstrap
mean_var_adjusted <- mean(results$variances)
ci <- quantile(results$ratios, probs = c(0.025, 0.975))
# Crear el histograma de los ratios de bootstrap
histograma <- ggplot(data.frame(Ratio = results$ratios), aes(x = Ratio)) +
geom_histogram(binwidth = 0.1, fill = "skyblue", color = "black") +
geom_vline(xintercept = ci[1], color = "red", linetype = "dashed", size = 1) +
geom_vline(xintercept = ci[2], color = "red", linetype = "dashed", size = 1) +
labs(title = "Histograma de Ratios de Bootstrap con Varianza Ajustada",
x = "Ratio (Percentil 90 / Percentil 10)",
y = "Frecuencia") +
theme_minimal()
# Mostrar el histograma
print(histograma)
